name: 'WebRTC Android Builder'
description: 'Build WebRTC Android AAR files automatically in the cloud using GitHub Actions.'
author: 'bentleypark'

branding:
  icon: 'smartphone'
  color: 'blue'

inputs:
  webrtc_branch:
    description: 'WebRTC branch to build (e.g., branch-heads/7258, branch-heads/7339)'
    required: false
    default: 'branch-heads/7258'
    type: string
  
  target_arch:
    description: 'Target architectures (comma separated)'
    required: false
    default: 'armeabi-v7a,arm64-v8a'
  
  build_config:
    description: 'Build configuration (release or debug)'
    required: false
    default: 'release'

  slack_webhook_url:
    description: 'Slack webhook URL for notifications (optional)'
    required: false
  
  slack_channel:
    description: 'Slack channel for notifications'
    required: false
    type: string
  
  enable_slack_notifications:
    description: 'Enable Slack notifications'
    required: false
    default: 'false'


outputs:
  aar_filename:
    description: 'Generated AAR filename'
    value: ${{ steps.build.outputs.aar_filename }}
  
  download_url:
    description: 'Download URL for artifacts'
    value: ${{ steps.build.outputs.download_url }}
  
  build_info:
    description: 'Build information summary'
    value: ${{ steps.build.outputs.build_info }}

runs:
  using: 'composite'
  steps:
    - name: Detect WebRTC milestone from branch (gitiles, fast)
      shell: bash
      run: |
        set -euo pipefail
        BRANCH="${{ inputs.webrtc_branch }}"
        echo "🚀 Starting WebRTC Android AAR build..."
        echo "Branch: $BRANCH"
        echo "Architectures: ${{ inputs.target_arch }}"
        echo "Configuration: ${{ inputs.build_config }}"
        
        echo "Resolving milestone from branch: $BRANCH"
        URL="https://chromium.googlesource.com/chromium/src/+/refs/${BRANCH}/chrome/VERSION?format=TEXT"
        
        if ! VERSION_B64=$(curl -fsSL "$URL" --max-time 15); then
          echo "❌ Failed to fetch chrome/VERSION from gitiles for $BRANCH" >&2
          echo "Please ensure the branch exists and Gitiles API is accessible" >&2
          exit 1
        fi
        
        # Parse milestone and version info from VERSION file
        VERSION_CONTENT=$(printf "%s" "$VERSION_B64" | base64 -d)
        MILESTONE=$(echo "$VERSION_CONTENT" | awk -F= '/^MAJOR=/{print $2}')
        MINOR=$(echo "$VERSION_CONTENT" | awk -F= '/^MINOR=/{print $2}')
        BUILD=$(echo "$VERSION_CONTENT" | awk -F= '/^BUILD=/{print $2}')
        PATCH=$(echo "$VERSION_CONTENT" | awk -F= '/^PATCH=/{print $2}')
        
        if [[ -z "${MILESTONE:-}" ]]; then
          echo "❌ Could not parse MAJOR from chrome/VERSION" >&2
          exit 1
        fi
        
        # Create full version string (skip MINOR since it's usually 0)
        FULL_VERSION="${MILESTONE}.${BUILD}.${PATCH}"
        
        echo "✅ Successfully detected version from Gitiles API:"
        echo "   Milestone: M$MILESTONE"
        echo "   Full Version: $FULL_VERSION"
        echo "   Build: $BUILD"
        echo "   Patch: $PATCH"
        
        echo "WEBRTC_MILESTONE=$MILESTONE" >> $GITHUB_ENV
        echo "WEBRTC_MINOR=$MINOR" >> $GITHUB_ENV
        echo "WEBRTC_BUILD=$BUILD" >> $GITHUB_ENV
        echo "WEBRTC_PATCH=$PATCH" >> $GITHUB_ENV
        echo "WEBRTC_FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
        echo "Final milestone: M$MILESTONE ($FULL_VERSION)"

    - name: Free up disk space
      shell: bash
      run: |
        echo "Initial disk space:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo docker image prune -a -f
        echo "Disk space after cleanup:"
        df -h

    - name: Set up build dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          python3 \
          python3-pip \
          curl \
          lsb-release \
          sudo \
          xz-utils \
          build-essential \
          ccache

    - name: Setup depot_tools
      shell: bash
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH="${PWD}/depot_tools:$PATH"
        echo "${PWD}/depot_tools" >> $GITHUB_PATH
        
        echo "Initializing depot_tools..."
        cd depot_tools
        ./ensure_bootstrap
        cd ..
        
        gclient --version
        echo "GYP_DEFINES=OS=android" >> $GITHUB_ENV
        echo "DEPOT_TOOLS_UPDATE=0" >> $GITHUB_ENV

    - name: Setup ccache environment
      shell: bash
      run: |
        # Setup ccache environment variables (fixed for all subsequent steps)
        echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
        echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV
        echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
        echo "CCACHE_SLOPPINESS=file_macro,time_macros,include_file_mtime,include_file_ctime" >> $GITHUB_ENV
    
    - name: Prepare cache key
      shell: bash
      run: |
        # Sanitize target_arch for cache key (remove spaces, commas to underscores)
        SANITIZED_ARCH=$(echo "${{ inputs.target_arch }}" | tr ', ' '_' | tr -d ' ')
        echo "SANITIZED_ARCH=$SANITIZED_ARCH" >> $GITHUB_ENV
    
    - name: Cache ccache directory
      uses: actions/cache@v4
      with:
        path: ~/.cache/ccache
        key: ccache-webrtc-${{ runner.os }}-M${{ env.WEBRTC_MILESTONE }}-${{ inputs.webrtc_branch }}-${{ env.SANITIZED_ARCH }}-${{ inputs.build_config }}
        restore-keys: |
          ccache-webrtc-${{ runner.os }}-M${{ env.WEBRTC_MILESTONE }}-${{ inputs.webrtc_branch }}-${{ env.SANITIZED_ARCH }}-
          ccache-webrtc-${{ runner.os }}-M${{ env.WEBRTC_MILESTONE }}-${{ inputs.webrtc_branch }}-
          ccache-webrtc-${{ runner.os }}-M${{ env.WEBRTC_MILESTONE }}-
          ccache-webrtc-${{ runner.os }}-
    
    - name: Configure ccache and Git
      shell: bash
      run: |
        # Configure ccache after cache restoration
        mkdir -p $HOME/.cache/ccache
        ccache --set-config max_size=2G
        ccache --show-config
        echo "Ccache stats after restoration:"
        ccache --show-stats
        
        # Configure Git
        git config --global user.name "WebRTC Builder"
        git config --global user.email "builder@webrtc.local"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global color.ui false

    - name: Create build workspace
      shell: bash
      run: |
        mkdir -p webrtc-build
        cd webrtc-build
        fetch --nohooks webrtc_android

    - name: Checkout WebRTC branch
      shell: bash
      run: |
        cd webrtc-build/src
        echo "Checking out WebRTC branch: ${{ inputs.webrtc_branch }}"
        git checkout ${{ inputs.webrtc_branch }}
        
        # Optimized gclient sync (parallel, cleanup unversioned)
        gclient sync --delete_unversioned_trees --jobs=4 --verbose

    - name: Install build dependencies
      shell: bash
      run: |
        cd webrtc-build/src
        sudo ./build/install-build-deps.sh --no-prompt --no-chromeos-fonts
    
    - name: Initialize ccache for build
      shell: bash
      run: |
        # Reset ccache stats before build for accurate measurement
        ccache --zero-stats
        echo "Ccache initialized for build:"
        ccache --show-stats

    - name: Configure build
      shell: bash
      run: |
        cd webrtc-build/src
        BUILD_ARGS='
          target_os="android"
          is_debug=${{ inputs.build_config == 'debug' && 'true' || 'false' }}
          is_component_build=false
          is_clang=true
          rtc_include_tests=false
          rtc_build_examples=false
          rtc_use_h264=true
          rtc_enable_protobuf=true
          use_custom_libcxx=false
          treat_warnings_as_errors=false
          use_rtti=true
          cc_wrapper="ccache"
          symbol_level=0
          blink_symbol_level=0
        '
        
        mkdir -p out/android
        gn gen out/android --args="$BUILD_ARGS"

    - name: Build WebRTC AAR
      id: build
      shell: bash
      run: |
        cd webrtc-build/src
        
        IFS=',' read -ra ARCH_ARRAY <<< "${{ inputs.target_arch }}"
        ARCH_ARGS=""
        for arch in "${ARCH_ARRAY[@]}"; do
          arch=$(echo "$arch" | xargs)
          ARCH_ARGS="$ARCH_ARGS --arch $arch"
        done
        
        # Generate AAR filename with detected version info (Mac-compatible format)
        AAR_FILENAME="libwebrtc-M${WEBRTC_MILESTONE}-${WEBRTC_BUILD}-patched-${WEBRTC_PATCH}.aar"
        echo "aar_filename=$AAR_FILENAME" >> $GITHUB_OUTPUT
        
        echo "Building WebRTC AAR with architectures: $ARCH_ARGS"
        echo "Version: M$WEBRTC_MILESTONE ($WEBRTC_FULL_VERSION), Branch: ${{ inputs.webrtc_branch }}"
        python3 tools_webrtc/android/build_aar.py $ARCH_ARGS \
          --build-dir out/android \
          --output "$AAR_FILENAME" \
          --extra-gn-args "is_debug=${{ inputs.build_config == 'debug' && 'true' || 'false' }}"
        
        # Calculate SHA256 hash for verification
        AAR_SHA256=$(sha256sum "$AAR_FILENAME" | cut -d' ' -f1)
        echo "AAR SHA256: $AAR_SHA256"
        
        # Export SHA256 for use in subsequent steps (like Slack notifications)
        echo "AAR_SHA256=$AAR_SHA256" >> $GITHUB_ENV
        
        # Create SHA256 file for download
        echo "$AAR_SHA256  $AAR_FILENAME" > "${AAR_FILENAME}.sha256"
        
        # Create build info file
        cat > build-info.txt << EOF
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        WebRTC Milestone: M$WEBRTC_MILESTONE
        WebRTC Version: $WEBRTC_FULL_VERSION
        Branch: ${{ inputs.webrtc_branch }}
        Build Config: ${{ inputs.build_config }}
        Target Architectures: ${{ inputs.target_arch }}
        AAR Filename: $AAR_FILENAME
        AAR SHA256: $AAR_SHA256
        GitHub Run: ${{ github.run_number }}
        EOF
        
        echo "download_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
        echo "build_info=WebRTC M$WEBRTC_MILESTONE ($WEBRTC_FULL_VERSION) AAR built successfully" >> $GITHUB_OUTPUT
        
        # Display ccache statistics
        echo "Final ccache stats:"
        ccache --show-stats

    - name: Upload WebRTC AAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webrtc-android-aar-M${{ env.WEBRTC_MILESTONE }}-${{ github.run_number }}
        path: |
          webrtc-build/src/*.aar
          webrtc-build/src/*.sha256
          webrtc-build/src/build-info.txt
        retention-days: 30
        if-no-files-found: error

    - name: Send Slack notification
      if: ${{ inputs.enable_slack_notifications == 'true' && inputs.slack_webhook_url != '' }}
      shell: bash
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "channel": "${{ inputs.slack_channel }}",
              "text": "🎉 *WebRTC Android AAR Build Success!*\n\n📋 *Build Information:*\n• Milestone: \`M$WEBRTC_MILESTONE\`\n• Version: \`$WEBRTC_FULL_VERSION\`\n• Branch: \`${{ inputs.webrtc_branch }}\`\n• Build: \`$WEBRTC_BUILD\`\n• Patch: \`$WEBRTC_PATCH\`\n• Architectures: \`${{ inputs.target_arch }}\`\n• Configuration: \`${{ inputs.build_config }}\`\n\n📦 *AAR File:* \`${{ steps.build.outputs.aar_filename }}\`\n🔒 *SHA256:* \`$AAR_SHA256\`\n\n🔗 [Download Artifacts](${{ steps.build.outputs.download_url }})"
            }' \
            ${{ inputs.slack_webhook_url }}
        fi