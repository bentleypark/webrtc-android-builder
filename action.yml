name: 'WebRTC Android Builder'
description: 'Build WebRTC Android AAR files automatically in the cloud using GitHub Actions. Universal platform support.'
author: 'bentleypark'

branding:
  icon: 'smartphone'
  color: 'blue'

inputs:
  webrtc_branch:
    description: 'WebRTC branch to build (e.g., branch-heads/7151, branch-heads/7103)'
    required: false
    default: 'branch-heads/7151'
    type: string
  
  target_arch:
    description: 'Target architectures (comma separated)'
    required: false
    default: 'armeabi-v7a,arm64-v8a'
  
  build_config:
    description: 'Build configuration (release or debug)'
    required: false
    default: 'release'

  slack_webhook_url:
    description: 'Slack webhook URL for notifications (optional)'
    required: false
  
  slack_channel:
    description: 'Slack channel for notifications'
    required: false
    type: string
  
  enable_slack_notifications:
    description: 'Enable Slack notifications'
    required: false
    default: 'false'


outputs:
  aar_filename:
    description: 'Generated AAR filename'
    value: ${{ steps.build.outputs.aar_filename }}
  
  download_url:
    description: 'Download URL for artifacts'
    value: ${{ steps.build.outputs.download_url }}
  
  build_info:
    description: 'Build information summary'
    value: ${{ steps.build.outputs.build_info }}

runs:
  using: 'composite'
  steps:
    - name: Detect WebRTC milestone from branch (gitiles, fast)
      shell: bash
      run: |
        set -euo pipefail
        BRANCH="${{ inputs.webrtc_branch }}"
        echo "🚀 Starting WebRTC Android AAR build..."
        echo "Branch: $BRANCH"
        echo "Architectures: ${{ inputs.target_arch }}"
        echo "Configuration: ${{ inputs.build_config }}"
        
        echo "Resolving milestone from branch: $BRANCH"
        URL="https://chromium.googlesource.com/chromium/src/+/refs/${BRANCH}/chrome/VERSION?format=TEXT"
        
        if ! VERSION_B64=$(curl -fsSL "$URL" --max-time 15); then
          echo "⚠️  Failed to fetch chrome/VERSION from gitiles for $BRANCH, falling back to static mapping" >&2
          
          # Extract branch number for static fallback
          BRANCH_NUMBER=$(echo "$BRANCH" | sed 's/.*branch-heads\///')
          echo "Branch number: $BRANCH_NUMBER"
          
          # Static milestone mapping (fallback)
          if [ "$BRANCH_NUMBER" -ge 7339 ]; then
            MILESTONE="140"
          elif [ "$BRANCH_NUMBER" -ge 7258 ]; then
            MILESTONE="139"
          elif [ "$BRANCH_NUMBER" -ge 7204 ]; then
            MILESTONE="138"
          elif [ "$BRANCH_NUMBER" -ge 7151 ]; then
            MILESTONE="137"
          elif [ "$BRANCH_NUMBER" -ge 7103 ]; then
            MILESTONE="136"
          elif [ "$BRANCH_NUMBER" -ge 7000 ]; then
            MILESTONE="135"
          elif [ "$BRANCH_NUMBER" -ge 6845 ]; then
            MILESTONE="134"
          else
            MILESTONE="133"
          fi
          
          # For static mapping, we can't determine exact patch numbers
          # But we can use the branch number as BUILD and estimate
          MINOR="0"
          BUILD="$BRANCH_NUMBER"
          PATCH="0"
          FULL_VERSION="${MILESTONE}.${BUILD}.${PATCH}"
          
          echo "Using static mapping: M$MILESTONE"
          echo "   Estimated version: $FULL_VERSION"
        else
          # Parse milestone and version info from VERSION file
          VERSION_CONTENT=$(printf "%s" "$VERSION_B64" | base64 -d)
          MILESTONE=$(echo "$VERSION_CONTENT" | awk -F= '/^MAJOR=/{print $2}')
          MINOR=$(echo "$VERSION_CONTENT" | awk -F= '/^MINOR=/{print $2}')
          BUILD=$(echo "$VERSION_CONTENT" | awk -F= '/^BUILD=/{print $2}')
          PATCH=$(echo "$VERSION_CONTENT" | awk -F= '/^PATCH=/{print $2}')
          
          if [[ -z "${MILESTONE:-}" ]]; then
            echo "❌ Could not parse MAJOR from chrome/VERSION" >&2
            exit 1
          fi
          
          # Create full version string (skip MINOR since it's usually 0)
          FULL_VERSION="${MILESTONE}.${BUILD}.${PATCH}"
          
          echo "✅ Successfully detected version from Gitiles API:"
          echo "   Milestone: M$MILESTONE"
          echo "   Full Version: $FULL_VERSION"
          echo "   Build: $BUILD"
          echo "   Patch: $PATCH"
        fi
        
        echo "WEBRTC_MILESTONE=$MILESTONE" >> $GITHUB_ENV
        echo "WEBRTC_MINOR=$MINOR" >> $GITHUB_ENV
        echo "WEBRTC_BUILD=$BUILD" >> $GITHUB_ENV
        echo "WEBRTC_PATCH=$PATCH" >> $GITHUB_ENV
        echo "WEBRTC_FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
        echo "Final milestone: M$MILESTONE ($FULL_VERSION)"

    - name: Free up disk space
      shell: bash
      run: |
        echo "Initial disk space:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo docker image prune -a -f
        echo "Disk space after cleanup:"
        df -h

    - name: Set up build dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          python3 \
          python3-pip \
          curl \
          lsb-release \
          sudo \
          xz-utils \
          build-essential

    - name: Setup depot_tools
      shell: bash
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH="${PWD}/depot_tools:$PATH"
        echo "${PWD}/depot_tools" >> $GITHUB_PATH
        
        echo "Initializing depot_tools..."
        cd depot_tools
        ./ensure_bootstrap
        cd ..
        
        gclient --version
        echo "GYP_DEFINES=OS=android" >> $GITHUB_ENV
        echo "DEPOT_TOOLS_UPDATE=0" >> $GITHUB_ENV

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "WebRTC Builder"
        git config --global user.email "builder@webrtc.local"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global color.ui false

    - name: Create build workspace
      shell: bash
      run: |
        mkdir -p webrtc-build
        cd webrtc-build
        fetch --nohooks webrtc_android

    - name: Checkout WebRTC branch
      shell: bash
      run: |
        cd webrtc-build/src
        echo "Checking out WebRTC branch: ${{ inputs.webrtc_branch }}"
        git checkout ${{ inputs.webrtc_branch }}
        gclient sync

    - name: Install build dependencies
      shell: bash
      run: |
        cd webrtc-build/src
        sudo ./build/install-build-deps.sh --no-prompt --no-chromeos-fonts

    - name: Configure build
      shell: bash
      run: |
        cd webrtc-build/src
        BUILD_ARGS='
          target_os="android"
          is_debug=${{ inputs.build_config == 'debug' && 'true' || 'false' }}
          is_component_build=false
          is_clang=true
          rtc_include_tests=false
          rtc_build_examples=false
          rtc_use_h264=true
          rtc_enable_protobuf=true
          use_custom_libcxx=false
          treat_warnings_as_errors=false
          use_rtti=true
        '
        
        mkdir -p out/android
        gn gen out/android --args="$BUILD_ARGS"

    - name: Build WebRTC AAR
      id: build
      shell: bash
      run: |
        cd webrtc-build/src
        
        IFS=',' read -ra ARCH_ARRAY <<< "${{ inputs.target_arch }}"
        ARCH_ARGS=""
        for arch in "${ARCH_ARRAY[@]}"; do
          arch=$(echo "$arch" | xargs)
          ARCH_ARGS="$ARCH_ARGS --arch $arch"
        done
        
        # Generate AAR filename with detailed version info
        if [ -n "${WEBRTC_FULL_VERSION:-}" ]; then
          AAR_FILENAME="libwebrtc-${WEBRTC_FULL_VERSION}.aar"
        else
          AAR_FILENAME="libwebrtc-m${WEBRTC_MILESTONE}.aar"
        fi
        echo "aar_filename=$AAR_FILENAME" >> $GITHUB_OUTPUT
        
        echo "Building WebRTC AAR with architectures: $ARCH_ARGS"
        echo "Version: M$WEBRTC_MILESTONE ($WEBRTC_FULL_VERSION), Branch: ${{ inputs.webrtc_branch }}"
        python3 tools_webrtc/android/build_aar.py $ARCH_ARGS \
          --build-dir out/android \
          --output "$AAR_FILENAME" \
          --extra-gn-args "is_debug=${{ inputs.build_config == 'debug' && 'true' || 'false' }}"
        
        echo "download_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
        echo "build_info=WebRTC M$WEBRTC_MILESTONE ($WEBRTC_FULL_VERSION) AAR built successfully" >> $GITHUB_OUTPUT

    - name: Send Slack notification
      if: ${{ inputs.enable_slack_notifications == 'true' && inputs.slack_webhook_url != '' }}
      shell: bash
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "channel": "${{ inputs.slack_channel }}",
              "text": "🎉 *WebRTC Android AAR Build Success!*\n\n📋 *Build Information:*\n• Milestone: \`M$WEBRTC_MILESTONE\`\n• Version: \`$WEBRTC_FULL_VERSION\`\n• Branch: \`${{ inputs.webrtc_branch }}\`\n• Build: \`$WEBRTC_BUILD\`\n• Patch: \`$WEBRTC_PATCH\`\n• Architectures: \`${{ inputs.target_arch }}\`\n• Configuration: \`${{ inputs.build_config }}\`\n\n📦 *AAR File:* \`${{ steps.build.outputs.aar_filename }}\`\n\n🔗 [Download Artifacts](${{ steps.build.outputs.download_url }})"
            }' \
            ${{ inputs.slack_webhook_url }}
        fi